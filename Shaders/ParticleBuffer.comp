// REQUIRES SsboBufferBindings.comp
//  PREFIX_SCAN_BUFFER_BINDING
// REQUIRES CrossShaderUniformLocations
//  UNIFORM_LOCATION_PARTICLE_BUFFER_SIZE


// TODO: header (if this works)
struct PrimitiveVec4
{
    float x;
    float y;
    float z;
    float w;
};

/*------------------------------------------------------------------------------------------------
Description:
    Stores info about a single particle.  Must match the value type and order in Particle.h.
Creator:    John Cox, 4/2017 (original from 9-25-2016)
------------------------------------------------------------------------------------------------*/
struct Particle
{
    PrimitiveVec4 _pos;
    PrimitiveVec4 _vel;

    uint _numberOfNearbyParticles;
    float _mass;
    float _collisionRadius;
    uint _mortonCode;
    uint _hasCollidedAlreadyThisFrame;
    int _isActive;

    // no native GLSL structures, so no padding necessary 
};


// the number of particles that the user specified
layout(location = UNIFORM_LOCATION_NUMBER_PARTICLES) uniform uint uNumberParticles;

// is double capacity so that particles can be sorted without an extra buffer
layout(location = UNIFORM_LOCATION_PARTICLE_BUFFER_FULL_SIZE) uniform uint uParticleBufferFullSize;

// for convenience
layout(location = UNIFORM_LOCATION_PARTICLE_BUFFER_READ_OFFSET) uniform uint uParticleBufferReadOffset;
layout(location = UNIFORM_LOCATION_PARTICLE_BUFFER_WRITE_OFFSET) uniform uint uParticleBufferWriteOffset;



/*------------------------------------------------------------------------------------------------
Description:
    This is the array of particles that the compute shader will be accessing.  It is set up on 
    the CPU side in ParticleSsbo::Init(...).

    Note: Without the binding point specifier, which implicitly assumed std430, then the 
    layout standard needs to be specified explicitly.  According to this website under heading 
    "Layout std430, new and better std140", std430 is the ONLY layout specifier available for 
    SSBOs.  I don't know what it does, but it is necessary.  
    http://malideveloper.arm.com/resources/sample-code/introduction-compute-shaders-2/
Creator:    John Cox, 9-25-2016
------------------------------------------------------------------------------------------------*/
layout (std430, binding = PARTICLE_BUFFER_BINDING) buffer ParticleBuffer
{
    Particle AllParticles[];
};

