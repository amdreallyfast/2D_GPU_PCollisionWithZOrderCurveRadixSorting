// REQUIRES Version.comp
// REQUIRES ComputeShaderWorkGroupSizes.comp
// REQUIRES SsboBufferBindings.comp
// REQUIRES CrossShaderUniformLocations.comp
// REQUIRES PrefixScanBuffer.comp
// REQUIRES ParticleBuffer.comp

// Y and Z work group sizes default to 1
layout (local_size_x = PARALLEL_SORT_WORK_GROUP_SIZE_X) in;

// also used in GetBitForPrefixScans.comp (different uniform of course because different shader)
layout(location = UNIFORM_LOCATION_BIT_NUMBER) uniform uint uBitNumber;


/*------------------------------------------------------------------------------------------------
Description:
    Uses the Radix Sorting algorithm to sort the Particle structures in the "read" portion of the
    ParticleBuffer into the "write" portion using the prefix sums from PrefixScanBuffer.  This is 
    necessary because there is no "swap" in parallel sorting.

    This is part of the Radix Sort algorithm.
    Note: As per Radix Sort, the value must remain relative to others with the same value.
    Suppose there is the following data: 0 1 0 0 1 1 0
    The 0s will be gathered to the left and the 1s to the right, but not in just any order.  The 
    first 0 will be on the far left, the second 0 after that, the third 0 after that, and the 
    fourth 0 after that.  Then the first 1, then the second 1, then the third. 
Parameters: None
Returns:    None
Creator:    John Cox, 5/2017
------------------------------------------------------------------------------------------------*/
void main()
{
    uint threadIndex = gl_GlobalInvocationID.x;
    if (threadIndex >= uParticleBufferFullSize)
    {
        return;
    }

    // remember that, during prefix scan, each thread works on 2 items, so the number of data 
    // entries that were scanned per work group is twice the size of a work group, but this 
    // shader deals with only one entry per thread, so divide work group ID in half to get the 
    // right prefix sum of all previous work groups
    uint prefixSumOfAllPreviousWorkGroups = PrefixSumsOfWorkGroupSums[gl_WorkGroupID.x / 2];
    uint prefixSumOfThisItemWithinWorkGroup = PrefixSumsPerWorkGroup[threadIndex]

    // add them together to get the total number of particles that came before with a 1 in the 
    // current bit of the Morton Code
    uint prefixSumOfOnes = 
        prefixSumOfAllPreviousWorkGroups + 
        prefixSumOfThisItemWithinWorkGroup

    // there are only 0s and 1s, so if they weren't counted in the sum, then they are 0s
    uint prefixSumOfZeros = threadIndex - prefixSumOfOnes;
    uint totalNumberOfZeros = uNumberParticles - totalNumberOfOnes;

    // the bit determines if the value should go with the 0s or with 1s on this sort step
    uint readIndex = threadIndex + uParticleBufferReadOffset;
    uint bitVal = (AllParticles[readIndex]._mortonCode >> uBitNumber) & 1;

    // Note: If the value being sorted has a 0 at the current bit, then the order of 0s in the 
    // data set is maintained (as required by Radix Sort) by the number of 0s that came before 
    // the current value.  If the value being sorted has a 1 at the current bit, then the order 
    // is maintained by the number of 1s that came before it.
    uint writeIndex = (bitVal == 0) ? prefixSumOfZeros : (totalNumberOfZeros + prefixSumOfOnes);
    writeIndex += uParticleBufferWriteOffset;

    // copy it to where it should be
    AllParticles[writeIndex] = AllParticles[readIndex];
}